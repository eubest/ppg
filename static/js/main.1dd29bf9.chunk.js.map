{"version":3,"sources":["frames/ProfileFrame Mixed Bars.png","App.js","reportWebVitals.js","index.js"],"names":["frameSize","App","useState","photo","setPhoto","combinedImage","setCombinedImage","handleImage","useCallback","files_event","reader","FileReader","onload","reader_event","img","Image","offscreenCanvas","document","createElement","width","height","offscreenCanvas_ctx","getContext","alpha","drawImage","pngUrl","toDataURL","src","target","result","readAsDataURL","files","useEffect","mergeImages","frame_mixed","then","b64","className","type","onChange","alt","onClick","download","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uRAAe,MAA0B,oD,OCQnCA,EAAY,KA2DHC,MAzDf,WAAgB,IAAD,EACeC,mBAAS,MADxB,mBACJC,EADI,KACGC,EADH,OAE+BF,mBAAS,MAFxC,mBAEJG,EAFI,KAEWC,EAFX,KAILC,EAAcC,uBAAY,SAAAC,GAC5B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAAC,GACZ,IAAMC,EAAM,IAAIC,MAChBD,EAAIF,OAAS,WACT,IAAMI,EAAkBC,SAASC,cAAc,UAC/CF,EAAgBG,MAAQnB,EACxBgB,EAAgBI,OAASpB,EAEzB,IAAMqB,EAAsBL,EAAgBM,WAAW,KAAM,CAAEC,OAAO,IAGhEH,EAAUN,EAAIM,OAASN,EAAIK,MAASnB,EAC1CqB,EAAoBG,UAChBV,EACA,GACCd,EAAYoB,GAAU,EALbpB,KAOVoB,GAGJ,IAAMK,EAAST,EAAgBU,YAC/BtB,EAASqB,IAEbX,EAAIa,IAAMd,EAAae,OAAOC,QAElCnB,EAAOoB,cAAcrB,EAAYmB,OAAOG,MAAM,MAC/C,CAAC3B,IAYR,OAVI4B,qBAAU,WACNC,YAAY,GAAD,mBACH9B,EAAQ,CAACA,GAAS,IADf,YAEH+B,EAAc,CAACA,GAAe,MAErCC,MAAK,SAAAC,GAAG,OAAI9B,EAAiB8B,QAC/B,CAACjC,IAKJ,qBAAKkC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,mDACA,uBAAOC,KAAK,OAAOC,SAAUhC,IAE7B,qBAAKoB,IAAKtB,EAAegC,UAAU,WAAWG,IAAI,mBAElD,wBAAQC,QAAS,kBAAMC,IAASrC,EAAe,2BAA4B,cAA3E,4CCjDGsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASqC,eAAe,SAM1BX,M","file":"static/js/main.1dd29bf9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ProfileFrame Mixed Bars.2624625f.png\";","import { useState, useEffect, useCallback } from 'react'\nimport './App.css'\nimport download from 'downloadjs'\n\nimport frame_mixed from './frames/ProfileFrame Mixed Bars.png'\n\nimport mergeImages from 'merge-images'\n\nconst frameSize = 1080\n\nfunction App() {\n    const [photo, setPhoto] = useState(null)\n    const [combinedImage, setCombinedImage] = useState(null)\n\n    const handleImage = useCallback(files_event => {\n        const reader = new FileReader()\n        reader.onload = reader_event => {\n            const img = new Image()\n            img.onload = function () {\n                const offscreenCanvas = document.createElement('canvas')\n                offscreenCanvas.width = frameSize\n                offscreenCanvas.height = frameSize\n\n                const offscreenCanvas_ctx = offscreenCanvas.getContext('2d', { alpha: false })\n\n                const width = frameSize\n                const height = (img.height / img.width) * frameSize\n                offscreenCanvas_ctx.drawImage(\n                    img,\n                    (frameSize - width) / 2,\n                    (frameSize - height) / 2,\n                    width,\n                    height,\n                );\n\n                const pngUrl = offscreenCanvas.toDataURL()\n                setPhoto(pngUrl)\n            }\n            img.src = reader_event.target.result\n        }\n        reader.readAsDataURL(files_event.target.files[0])\n    }, [setPhoto])\n\n    useEffect(() => {\n        mergeImages([\n            ...(photo ? [photo] : []),\n            ...(frame_mixed ? [frame_mixed] : []),\n        ])\n        .then(b64 => setCombinedImage(b64))\n    }, [photo])\n\n\n\nreturn (\n    <div className=\"App\">\n        <header className=\"App-header\">\n            <label>Load an Image:</label>\n            <input type=\"file\" onChange={handleImage} />\n\n            <img src={combinedImage} className=\"App-logo\" alt=\"Finished Frame\" />\n\n            <button onClick={() => download(combinedImage, \"volt-profile-picture.png\", \"image/png\")}>Download Profile Picture</button>\n        </header>\n    </div>\n)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}